#! python3
# -*- coding: utf-8 -*-
from tkinter import *
from utils import newline, filebackup, loadjson, savejson, tkinter_color
from current_paths import *



# master = Tk()
#
# e = Entry(master)
# e.pack()
#
# e.focus_set() # todo полезно
#
# def callback():
#     print (e.get())
#
# b = Button(master, text="get", width=10, command=callback)
# b.pack()
#
# mainloop()
# e = Entry(master, width=50)
# e.pack()
#
# text = e.get()
# def makeentry(parent, caption, width=None, **options):
#     Label(parent, text=caption).pack(side=LEFT)
#     entry = Entry(parent, **options)
#     if width:
#         entry.config(width=width)
#     entry.pack(side=LEFT)
#     return entry
#
# user = makeentry(parent, "User name:", 10)
# password = makeentry(parent, "Password:", 10, show="*")
# content = StringVar()
# entry = Entry(parent, text=caption, textvariable=content)
#
# text = content.get()
# content.set(text)

from tkinter import *
root = Tk()
# start of tkinter script

# e = Entry(root)
# e.pack()

# You can also bind the entry widget to a StringVar instance, and set or get the entry
# text via that variable:

# v = StringVar()
# e = Entry(root, textvariable=v)
# e.pack()
#
# v.set("a default value")
# s = v.get()

# To add entry text to the widget, use the insert method. To replace the current text,
# you can call delete before you insert the new text.

# e.delete(0, END)
# e.insert(0, "a default value")


# To fetch the current entry text, use the get method:

# s = e.get()

# implementation of pagent nogui program
# import solvounload
# solvounload.main()

from solvounload import settingsJsonFile, get_safe_time, get_current_time

def run_code(code):
    exec(code, globals())

global row
row = -1
global groups
groups = [{"number": "1", "ko": "158", "lo": "305 %269"},
          {"number": "2", "ko": "156", "lo": "268 %327"},
          {"number": "3", "ko": "73", "lo":"336 %337 %339"},
          {"number": "4", "ko": "125", "lo":"321 %322"},
          {"number": "5", "ko": "159", "lo": "335 %334"},
          {"number": "10", "ko": "121", "lo":"330 %331"},
          {"number": "fp", "ko": "143 %154", "lo": "332 %333"},]


def reloadJSON():
    filebackup(settingsJsonFile)
    global jsonStringInMemory
    jsonStringInMemory = loadjson(settingsJsonFile)
reloadJSON()


def saveJSON(event = None):
    if event:
        jsonStringInMemory["last_lo"] = last_lo_var.get()
        jsonStringInMemory["last_batch"] = last_batch_var.get()
        jsonStringInMemory["last_onebyone"] = last_onebyone_var.get()
        for group in groups:
            exec('jsonStringInMemory["kan_otb_time_' + group["number"] + '"] = last_kan_otb_var_' + group["number"] + '.get()')
            exec('jsonStringInMemory["kan_otb_note_' + group["number"] + '"] = kan_otb_note_var_' + group["number"] + '.get()')
        jsonStringInMemory["note"] = note_var.get()
    savejson(settingsJsonFile, jsonStringInMemory)


def check_colors():
    red_color = tkinter_color(255, 200, 200)
    green_color = tkinter_color(200, 255, 200)
    yellow_color = tkinter_color(255, 255, 200)
    entry_names = ["last_lo", "last_batch", "last_onebyone"]
    for entry in entry_names:
        code = "if " + entry + "_var.get() == get_safe_time():" + newline + \
               "    " + entry + "_entry.configure(bg=" + green_color + ")" + newline + \
               "print(int(" + entry + "_var.get()[0:2]) - int(get_safe_time()[0:2]))" + newline + \
               "elif int(" + entry + "_var.get()[0:2]) - int(get_safe_time()[0:2]) <= -2:" + newline + \
               "    " + entry + "_entry.configure(bg=" + red_color + ")" + newline + \
               "else:" + newline + \
               "    " + entry + "_entry.configure(bg=" + yellow_color + ")"
        run_code(code)


def inc_day(var):
    reloadJSON()
    new_date = jsonStringInMemory[var][:2]
    new_date = str(int(new_date) + 1).zfill(2)
    if new_date == "32":
        new_month = str(int(jsonStringInMemory[var][3:5]) + 1).zfill(2)
        new_date = "01." + new_month
    jsonStringInMemory[var] = new_date + jsonStringInMemory[var][len(new_date):]
    saveJSON()
    exec(var + "_var.set(jsonStringInMemory[var])")
    if jsonStringInMemory[var] == get_safe_time():
        exec("btn_" +var + ".destroy()")
    check_colors()


def add_row(name, text, button_text, button_function, var_set_from, entry_state="'normal'"):
    code = "row += 1" + newline + \
           name + "_label = Label(root, text='" + text + "')" + newline + \
           name + "_label.grid(row=row, sticky=E)" + newline + \
           name + "_var = StringVar()" + newline + \
           name + "_var.set(" + var_set_from + ")" + newline + \
           name + "_entry = Entry(root, textvariable=" + name + "_var, state=" + entry_state + ")" + newline + \
           name + "_entry.grid(row=row, column=1, sticky=W+E+S+N)" + newline + \
           "if " + name + "_var.get() != get_safe_time() or '" + name + "' in ['note','safe_time']:" + newline + \
           "    " + name + "_btn = Button(root, height = 1, text = '" + button_text + "')" + newline + \
           "    " + name + "_btn.bind('<Button-1>', lambda x: " + button_function + ")" + newline + \
           "    " + name + "_btn.grid(row=row, column=2, sticky=W+E)"
    run_code(code)


add_row("safe_time", "Безопасное время:", "Update", "safe_time_var.set(get_safe_time())", "get_safe_time()", entry_state = "DISABLED")
add_row("last_lo", "Последнее время подтверждённх ЛО:", "+Day", "inc_day('last_lo')", "jsonStringInMemory['last_lo']")
add_row("last_batch", "Последнее время отгруженных рейсов:", "+Day", "inc_day('last_batch')", "jsonStringInMemory['last_batch']")
add_row("last_onebyone", "Последнее время отгруженных непр. накл.:", "+Day", "inc_day('last_onebyone')", "jsonStringInMemory['last_onebyone']")



def update_kan_otb_note(group, event = None):
    code = 'global kan_otb_note_var_' + group + newline + \
    'if kan_otb_note_var_' + group + '.get() == "п12мм12мо12" or kan_otb_note_var_' + group + '.get() == "п1212мм1212мо1212":' + newline + \
    '    kan_otb_note_var_' + group + '.set("пмммо")' + newline + \
    'else:' + newline + \
    '    print(kan_otb_note_var_' + group + '.get())' + newline + \
    'jsonStringInMemory["kan_otb_note_' + group + '"] = kan_otb_note_var_' + group + '.get()' + newline + \
    'jsonStringInMemory["kan_otb_time_' + group + '"] = get_current_time()' + newline + \
    'last_kan_otb_var_' + group + '.set(jsonStringInMemory["kan_otb_time_' + group + '"])'
    run_code(code)
    saveJSON()
def add_unload_section(group, ko, lo):
    try:
        jsonStringInMemory["kan_otb_time_" + group]
    except KeyError:
        jsonStringInMemory["kan_otb_note_" + group] = "nothing"
        jsonStringInMemory["kan_otb_time_" + group] = "nothing"
        saveJSON()
    group = str(group)
    global row
    row += 1

    code = "from tkinter import *" + newline
    code += 'global kan_otb_note_var_' + group + newline + \
    'last_kan_otb_label_' + group + ' = Label(root, text="' + group + 'ГР %' + ko + ' К.О. / %' + lo + ' Л.О.")' + newline + \
    'last_kan_otb_label_' + group + '.grid(row=row, sticky=E, rowspan=2)' + newline + \
    'last_kan_otb_var_' + group + ' = StringVar()' + newline + \
    'last_kan_otb_var_' + group + '.set(jsonStringInMemory["kan_otb_time_' + group + '"])' + newline + \
    'last_kan_otb_entry_' + group + ' = Entry(root, textvariable=last_kan_otb_var_' + group + ', state=DISABLED)' + newline + \
    'last_kan_otb_entry_' + group + '.grid(row=row, column=1, sticky=W+E)'
    run_code(code)
    row += 1
    code = "from tkinter import *" + newline
    # code += 'kan_otb_note_label_' + group + ' = Label(root, text="^^^")' + newline + \
    # 'kan_otb_note_label_' + group + '.grid(row=row, sticky=E)' + newline)
    code += 'kan_otb_note_var_' + group + ' = StringVar()' + newline + \
    'kan_otb_note_var_' + group + '.set(jsonStringInMemory["kan_otb_note_' + group + '"])' + newline + \
    'kan_otb_note_entry_' + group + ' = Entry(root, textvariable=kan_otb_note_var_' + group + ')' + newline + \
    'kan_otb_note_entry_' + group + '.grid(row=row, column=1, sticky=W+E)' + newline + \
    'kan_otb_btn_note_' + group + ' = Button(root, text="Update")' + newline + \
    'kan_otb_btn_note_' + group + '.bind("<Button-1>", lambda x: update_kan_otb_note(group="' + group + '"))' + newline + \
    'kan_otb_btn_note_' + group + '.grid(row=row-1, column=2, sticky=W+E+S+N, rowspan=2)'
    run_code(code)

for group in groups:
    add_unload_section(group["number"], group["ko"], group["lo"])

# Text_test = Text(root)
# Text_test.grid(row=5, sticky=E)

def update_note():
    jsonStringInMemory["note"] = note_var.get()
    saveJSON()
add_row("note", "Заметка:", "Update", "update_note()", "jsonStringInMemory['note']")

row += 1
btn_Save = Button(root, text = "Save all!")
btn_Save.bind("<Button-1>", saveJSON)
btn_Save.grid(row=row, sticky=W+E, columnspan=4)

check_colors()

# end of tkinter script
root.title("SolvoUnload")
# root.iconbitmap(r"C:\Program Files (x86)\Seagull\BarTender Suite\bartend.ico")
mainloop()